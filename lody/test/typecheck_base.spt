module typecheck_base

test type [[
[[Type]]
]] 0 errors run get-type on #1 to Type()

test fn sig 1 [[
[[_: Type -> Type]]
]] 0 errors run get-type on #1 to Type()

test fn sig 2 [[
[[_: Type -> __: Type -> Type]]
]] 0 errors run get-type on #1 to Type()

test id fn 1 [[
[[/x:Type. x]]
]] 0 errors run get-type on #1 to FnType("x", Type(), Type())

test id fn 2 [[
[[/x : (_: Type -> Type). x Type]]
]] 0 errors run get-type on #1 to FnType("x", FnType("_", Type(), Type()), Type())

test id fn 3 [[
[[/T : Type. /x : T. x]]
]] 0 errors run get-type on #1 to FnType("T", Type(), FnType("x", Var("T"), Var("T")))

test id fn 3b [[
/T:Type. [[/x : T. x]]
]] 0 errors run get-type on #1 to FnType("x", Var("T"), Var("T"))

test id fn 4b [[
[[(/T : Type. /x : T. x) Type]]
]] 0 errors run get-type on #1 to FnType("x", Type(), Type())

test id fn 5c [[
[[(/T : Type. /x : T. x) Type Type]]
]] 0 errors run get-type on #1 to Type()

test id fn 4 [[
[[(/T : Type. /x : T. x) (_: Type -> Type)]]
]] 0 errors run get-type on #1 to FnType("x", FnType("_", Type(), Type()), FnType("_", Type(), Type()))

test id fn 4a [[
[[(/T : Type. /x : T. x)]] (_: Type -> Type)
]] 0 errors run get-type on #1 to FnType("T", Type(), FnType("x", Var("T"), Var("T")))

test id fn 5 [[
[[(/T : Type. /x : T. x) (_: Type -> Type) (/t:Type. t)]]
]] 0 errors run get-type on #1 to FnType("_", Type(), Type())

test id fn 6 [[
[[(/x : (_: Type -> Type). x) (/t:Type. t)]]
]] 0 errors run get-type on #1 to FnType("_", Type(), Type())


test shadow 1 [[
[[(/T : Type. /T : T. T)]]
]] 0 errors run get-type on #1 to FnType("T", Type(), FnType("T", Var("T"), Var("T")))

test shadow 2 [[
let x = Type;
let y = x;
let x = _: Type -> Type;
y
]] 0 errors

test simple let 1 [[
[[
let x = Type;
x
]]
]] 0 errors run get-type on #1 to Type()

test simple let 2 [[
[[
let x = Type;
let y = x;
y
]]
]] 0 errors run get-type on #1 to Type()

test shadow 3 [[
[[
let x = Type;
/z:x. z
]]
]] 0 errors run get-type on #1 to FnType("z", Type(), Type())

test shadow 4s1 [[
[[
let f = /y:Type. y;
f
]]
]] 0 errors run get-type on #1 to FnType("y", Type(), Type())

test shadow 4s1b [[
[[
let f = (/y:Type. y);
f Type
]]
]] 0 errors run get-type on #1 to Type()

test shadow 4s2 [[
[[
let x = (/y:Type. y) Type;
x
]]
]] 0 errors run get-type on #1 to Type()

test shadow 4 [[
[[
let x = (/y:Type. y) Type;
/z:x. z
]]
]] 0 errors run get-type on #1 to FnType("z", Type(), Type())

test shadow 4a [[
let x = (/y:Type. y) Type;
let y = _: Type -> Type;
/z:x. z
]] 0 errors

test tricky type 2 [[
[[(/y : (/x : Type. x) Type. y)]]
]] 0 errors run get-type on #1 to FnType("y", Type(), Type())

test subst fn destruct [[
[[
let id = /T:Type. /x:T. x;
let typ = Type;
id typ
]]
]] 0 errors run get-type on #1 to FnType(_, Type(), Type())

test fun arg [[
[[
/v : Type. (/x : Type. x) v
]]
]] 0 errors run get-type on #1 to FnType("v", Type(), Type())

test wrong order substs 1 [[
[[
let x = (let y = Type; y);
let y = _: Type -> Type;
/v: x. v
]]
]] 0 errors run get-type on #1 to FnType("v", Type(), Type())

test wrong order substs 2 [[
[[
let y = (_: Type -> Type); /x : (let y = Type; y). x
]]
]] 0 errors run get-type on #1 to FnType(_, Type(), Type())

test wrong order substs 3 [[
[[
/x : (let y = (_: Type -> Type); let y = Type; y). x
]]
]] 0 errors run get-type on #1 to FnType(_, Type(), Type())

test wrong order substs 4 [[
[[
/x : (let y = Type; y). (let y = (_: Type -> Type); x)
]]
]] 0 errors run get-type on #1 to FnType(_, Type(), Type())

test wrong order substs 5 [[
[[
/x : (let y = Type; y). (let y = (_: Type -> Type); x)
]]
]] 0 errors run get-type on #1 to FnType(_, Type(), Type())

test wrong order substs 6 [[
[[
(/x : Type. (let y = x; let x = Type; (/ x : y. y))) (_: Type -> Type)
]]
]] 0 errors run get-type on #1 to FnType(_, FnType(_, Type(), Type()), Type())
