module typecheck_infer

test infer true [[
true :: _
]] 0 errors

test infer Type [[
Type :: _
]] 0 errors

test infer FnType [[
(\x : Type. x) :: _
]] 0 errors

test infer identity [[
let id = (\T : Type. \x: T. x);
[[(id _ true)]] :: Bool
]] 0 errors run get-type on #1 to BoolType()

test infer inside if [[
postulate T : Type;
true :: if true then _ else T end
]] 0 errors

test infer nothing [[
_
]] >=1 errors

test infer inside if false [[
true :: if true then Bool else _ end
]] >=1 errors

test infer via variable [[
let id = (\T : Type. \x: T. x);
let x = _;
(id x true)
]] 0 errors

test infer function [[
\f: _: Bool -> Type.
\x: f _.
let g = \y: f true. y;
g x
]] 0 errors

test variable via type assert [[
let f = _;
true :: f
]] 0 errors

test infer function type [[
(\x: _. x) true
]] 0 errors

test infer function type via type assert [[
(\x: _. true) :: (_: Bool -> Bool)
]] 0 errors

test infer function type via let - app [[
let f = (\x: _. true);
f true
]] 0 errors

test infer function type via let - ass [[
let f = (\x: _. true);
f :: (_: Bool -> Bool)
]] 0 errors

test infer function type via two lets [[
let f = (\x: _. true);
let g = (\y: _. f y);
g true
]] 0 errors

test infer function type via if 1 [[
(\b: _. if b then Type else Type end)
]] 0 errors

test infer function type via if 2 [[
(\b: _. if true then b else Type end)
]] 0 errors

test new infer [[
\f : (_: Type -> Type).
\g : (_: (f Bool) -> (f Bool)).
\x : f _.
g x
]] 0 errors

test new infer 2 [[
let f = _ :: (_: Type -> Type);
\g : (_: (f Bool) -> (f Bool)).
\x : f _.
g x
]] >=1 errors

// This is theoretically solvable because we know `f x = Bool`, and x is free.
// But my approach cannot solve it.
test new infer 3 [[
let f = _ :: (_: Type -> Type);
\x : Type.
\g: (_: (f x) -> Bool).
g true
]] >=1 errors

test new infer 4 [[
let f = _;
postulate x : Type;
postulate g : (_: (f x) -> Bool);
g true
]] >=1 errors


test infer true [[
postulate f: _: Bool -> Type;
postulate g: _: f true -> Type;
\x: f _. g x
]] 0 errors
