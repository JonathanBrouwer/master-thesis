module typecheck_datatypes2

test param data type 0 elim [[
data Maybe (T : Type) = : Type 0;
(elim Maybe) : (T : Type -> P : (_: Maybe T -> Type) -> v: Maybe T -> P v)
]] 0 errors 

test param data type 1 elim [[
data Maybe (T : Type) =: Type 0
	None : Maybe T;
(elim Maybe) : (T : Type -> P : (_: Maybe T -> Type) -> _: P (None T) -> v: Maybe T -> P v)
]] 0 errors 

test param data type 2 elim [[
data Maybe (T : Type) = : Type 0
	None : Maybe T,
	Some : _: T -> Maybe T;
(elim Maybe) : (T : Type -> P : (_: Maybe T -> Type) -> _: P (None T) -> _: (x: T -> P (Some T x)) -> v: Maybe T -> P v)
]] 0 errors 

test param data type 2 elim 2 simple [[
data Maybe (T : Type) = : Type 0
	None : Maybe T;
true : (elim Maybe) Type (\_: Maybe Type. Type) Bool (None Type)
]] 0 errors

test param data type 2 elim 2 [[
data Maybe (T : Type) = : Type 0
	None : Maybe T,
	Some : _: T -> Maybe T;
true : (elim Maybe) Type (\_: Maybe Type. Type) Type (\T: Type. T) (Some Type Bool)
]] 0 errors


test param data type 2 elim 2 [[
data MaybeRec (T : Type) = : Type 0
	None : MaybeRec T,
	Some : _: MaybeRec T -> MaybeRec T;
(elim MaybeRec) : (T : Type -> P : (_: MaybeRec T -> Type) -> _: P (None T) -> _: (x: MaybeRec T -> y : P x -> P (Some T x)) -> v: MaybeRec T -> P v)
]] 0 errors

test index data type 1 [[
data IsTrue = (b : Bool) (c : Bool) : Type 0;
IsTrue : (_: Bool -> _: Bool -> Type)
]] 0 errors

test index data type 2 [[
data IsTrue = (b : Bool) : Type 0
	isTrue : IsTrue true;
IsTrue : (_: Bool -> Type)
]] 0 errors

test index data type 3 [[
data IsTrue = (b : Bool) : Type 0
	isTrue : IsTrue true;
isTrue : IsTrue true
]] 0 errors

test index data type 4 [[
data IsTrue = (b : Bool) : Type 0
	isTrue : b : Bool -> IsTrue b;
isTrue : (b: Bool -> IsTrue b)
]] 0 errors

test index data type elim 1 [[
data IsTrue = (b : Bool) : Type 0
	isTrue : IsTrue true;
(elim IsTrue) : (P : (b: Bool -> _: IsTrue b -> Type) -> _: P true isTrue -> b : Bool -> v: IsTrue b -> P b v)
]] 0 errors

test index data type use elim 1 [[
data IsTrue = (b : Bool) : Type 0
	isTrue : IsTrue true;
(elim IsTrue) (\b: Bool. \it: IsTrue b. Type) : (_: Type -> b: Bool -> v: IsTrue b -> Type)
]] 0 errors

test index data type use elim 2 [[
data IsTrue = (b : Bool) : Type 0
	isTrue : IsTrue true;
(elim IsTrue) (\b: Bool. \it: IsTrue b. Type) Bool true isTrue
]] 0 errors

test eq 1 [[
data Eq = (e1: Bool) (e2 : Bool) : Type 0
	refl : e : Bool -> Eq e e;
Type
]] 0 errors

test eq 2 [[
data Eq (T : Type) = (e1: T) (e2 : T) : Type 0
	refl : e : T -> Eq T e e;
(elim Eq) : T: Type -> P: (e1: T -> e2: T -> _: Eq T e1 e2 -> Type) -> _: (e: T -> P e e (refl T e)) -> e1 : T -> e2 : T -> v: Eq T e1 e2 -> P e1 e2 v
]] 0 errors

test tuple [[
data Tuple (T1 : Type) (T2 : Type) = : Type 0
    mktp : e1 : T2 -> e2 : T2 -> Tuple T1 T2;
Type
]] 0 errors

test index data type use elim 2 [[
data IsTrue = (b : Bool) : Type 0
	isTrue : IsTrue true;
true : (elim IsTrue) (\b: Bool. \it: IsTrue b. Type) Bool true isTrue
]] 0 errors

test term [[
data Nat = : Type 0
	z : Nat,
	s : n : Nat -> Nat;
data Fin = (i : Nat)
	fz : n : Nat -> Fin (s n),
	fs : n : Nat -> _: Fin n -> Fin (s n);
	
data Term = (k: Nat)
	var : n : Nat -> _: Fin n -> Term n,
	app : n : Nat -> _: Term n -> _: Term n -> Term n,
	abs : n : Nat -> _: Term (s n) -> Term n;

(elim Term)
]] 0 errors

test x [[
data X =
  x : T : Type -> x : T -> X;
X
]] 0 errors

test recparam 1 [[
data Rec (T : Type) =
    z : Rec T,
	c : x: Rec T -> Rec T;
(elim Rec) : T : Type -> P : (_: Rec T -> Type) -> _: P (z T) -> _: (v: Rec T -> _: P v -> P (c T v)) -> v: Rec T -> P v
]] 0 errors

test recparam 1 - apply 1 [[
data Rec (T : Type) =
    z : Rec T,
	c : x: Rec T -> Rec T;
Type : (elim Rec) Bool (\_: Rec Bool. Type) Type (\v: Rec Bool. \t: Type. _: Type -> t) (z Bool)
]] 0 errors

test recparam 1 - apply 2 [[
data Rec (T : Type) =
    z : Rec T,
	c : x: Rec T -> Rec T;
(\x: Type. Type) : (elim Rec) Bool (\_: Rec Bool. Type) Type (\v: Rec Bool. \t: Type. _: Type -> t) (c Bool (z Bool))
]] 0 errors

test recparam 2 [[
data Rec (T : Type) =
    z : Rec T,
	c : x: Rec Bool -> Rec T;
(elim Rec) : T : Type -> P : (_: Rec T -> Type) -> _: P (z T) -> _: (v: Rec Bool -> P (c T v)) -> v: Rec T -> P v
]] 0 errors

test recparam 2 - apply 1 [[
data Rec (T : Type) =
    z : Rec T,
	c : x: Rec Bool -> Rec T;
Type : (elim Rec) Bool (\_: Rec Bool. Type) Type (\v: Rec Bool. Bool) (z Bool)
]] 0 errors

test recparam 2 - apply 2 [[
data Rec (T : Type) =
    z : Rec T,
	c : x: Rec Bool -> Rec T;
false : (elim Rec) Bool (\_: Rec Bool. Type) Type (\v: Rec Bool. Bool) (c Bool (z Bool))
]] 0 errors

test recindex 1 [[
data Rec = (T : Type)
    z : T: Type -> Rec T,
	c : T: Type -> x: Rec T -> Rec T;
(elim Rec) : P : (T : Type -> _: Rec T -> Type) -> _: (T : Type -> P T (z T)) -> _: (T : Type -> v: Rec T -> _: P T v -> P T (c T v)) -> T : Type -> v: Rec T -> P T v
]] 0 errors

test recindex 1 - apply 1 [[
data Rec = (T : Type)
    z : T: Type -> Rec T,
	c : T: Type -> x: Rec T -> Rec T;
Bool : (elim Rec) (\T: Type. \r: Rec T. Type) (\W: Type. W) (\V: Type. \v: Rec V. \p: Type. _: Type -> p) Type (z Type)
]] 0 errors

test recindex 1 - apply 2 [[
data Rec = (T : Type)
    z : T: Type -> Rec T,
	c : T: Type -> x: Rec T -> Rec T;
(\w: Type. Bool) : (elim Rec) (\T: Type. \r: Rec T. Type) (\W: Type. W) (\V: Type. \v: Rec V. \p: Type. (_: Type -> p)) Type (c Type (z Type))
]] 0 errors

test recindex 2 [[
data Rec = (T : Type)
    z : T: Type -> Rec T,
	c : T: Type -> x: Rec Bool -> Rec T;
(elim Rec) : P : (T : Type -> _: Rec T -> Type) -> _: (T : Type -> P T (z T)) -> _: (T : Type -> v: Rec Bool -> _: P Bool v -> P T (c T v)) -> T : Type -> v: Rec T -> P T v
]] 0 errors

test recindex 2 - apply 1 [[
data Rec = (T : Type)
    z : T: Type -> Rec T,
	c : T: Type -> x: Rec Bool -> Rec T;
true : (elim Rec) (\T: Type. \r: Rec T. Type) (\W: Type. W) (\V: Type. \v: Rec Bool. \p: Type. _: Type -> p) Bool (z Bool)
]] 0 errors

test recindex 2 - apply 2 [[
data Rec = (T : Type)
    z : T: Type -> Rec T,
	c : T: Type -> x: Rec Bool -> Rec T;
(\w: Type. true) : (elim Rec) (\T: Type. \r: Rec T. Type) (\W: Type. W) (\V: Type. \v: Rec Bool. \p: Type. _: Type -> p) Type (c Type (z Bool))
]] 0 errors

test multiple args cons 1 [[
data Test =
	c : X : Type -> Y : Type -> Test;
true : elim Test (\x: Test. Type) (\x: Type. \y: Type. x) (c Bool Type)
]] 0 errors

test multiple args cons 2 [[
data Test =
	c : X : Type -> Y : Type -> Test;
true : elim Test (\x: Test. Type) (\x: Type. \y: Type. y) (c Type Bool)
]] 0 errors




