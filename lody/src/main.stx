module main

imports

  signatures/start-sig
  subst
  beta_eq
  
signature
relations
  name : ID -> Expr
name-resolution
  labels P

rules

  programOk : Start
  programOk(p@Program(stmts, expr)) :- {s T}
  	new s,
  	typeOfExpr(s, expr) == T,
  	@p.type := T.
  	
  typeOfExpr : scope * Expr -> Expr
  typeOfExpr(s, e) = T :-
    typeOfExpr_(s, e) == T,
    @e.type := T.
  
  typeOfExpr_ : scope * Expr -> Expr
  typeOfExpr_(s, Type()) = Type().
  typeOfExpr_(s, Var(id)) = resolveName(s, id).
  	
  typeOfExpr_(s, FnType(arg_name, arg_type, rtrn)) = Type() :-
	// The arg type must be a type
  	expectBetaEq(typeOfExpr(s, arg_type), Type()),
  	// Now typecheck the type of the body with the arg in scope
  	expectBetaEq(typeOfExpr(scopeAddFnArg(arg_name, arg_type, s), rtrn), Type()).
  	
  typeOfExpr_(s, FnConstruct(arg_name, arg_type, body)) = FnType(arg_name, arg_type, body_type) :- {s'}
	// The arg type must be a type
  	expectBetaEq(typeOfExpr(s, arg_type), Type()),
  	// Now typecheck the body with the arg in scope
  	typeOfExpr(scopeAddFnArg(arg_name, arg_type, s), body) == body_type.
  
  typeOfExpr_(s, FnDestruct(fn, arg)) = subst(fn_body_type, fn_arg_name, arg) :- {fn_arg_type}
  	// After beta reduction, the type of fn must be FnType
  	betaReduceHead(typeOfExpr(s, fn)) == FnType(fn_arg_name, fn_arg_type, fn_body_type),
  	// And the type of arg must be beta eq to the declared arg type
  	expectBetaEq(typeOfExpr(s, arg), fn_arg_type).
  
  scopeAddFnArg : ID * Expr * scope -> scope
  scopeAddFnArg(id, T, s) = s' :-
  	new s', s'-P->s,
  	!name[id, T] in s',
  	@id.type := T.
  
  resolveName : scope * ID -> Expr
  resolveName(s, id) = T :- {id'}
    queryNames(s, id) == [(_, (id', T))|_]
        | error $[Variable [id] not defined],
    @id.ref := id',
    @id.type := T.
  
  queryNames : scope * ID -> list((path * (ID * Expr)))
  queryNames(s, id) = ps :-
  	query name filter P* and { id' :- id' == id } min $ < P in s |-> ps.
