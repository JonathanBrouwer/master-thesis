module type_check/scopes

imports

  signatures/start-sig
  
signature
sorts
  NameEntry
constructors
  NameType : Expr -> NameEntry
  NameSubst : scope * Expr -> NameEntry
relations
  name : RID -> NameEntry
name-resolution
  labels P
  
rules

  scopePutType : scope * RID * Expr -> scope
  scopePutType(s, id, t) = s' :-
  	new s', s' -P-> s,
  	!name[id, NameType(t)] in s'.
  	
  scopePutSubst : scope * RID * (scope * Expr) -> scope
  scopePutSubst(s, id, (sv, v)) = s' :-
  	new s', s' -P-> s,
  	!name[id, NameSubst(sv, v)] in s'.
  	
  scopeGetName : scope * RID * ID -> NameEntry
  scopeGetName(s, rid, id) = result :- {id'}
  	scopeGetNames(s, rid) == [(_, (id', result))] | error $[Unknown variable [rid] in [s]],
  	@rid.ref := id'.
  
  scopeGetNames : scope * RID -> list((path * (RID * NameEntry)))
  scopeGetNames(s, id) = results :-
  	query name filter P* and { id' :- id' == id } min $ < P in s |-> results.

  empty_scope : -> scope
  empty_scope() = s :- new s.
  
  rid : ID -> RID
  rid(Syn(n)) = n.
  
  