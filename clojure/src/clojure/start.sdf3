module clojure/start

context-free start-symbols

  CStart

context-free sorts

  CStart CExpr

context-free syntax

  CStart.CProgram = es:CExpr* {layout(align-list es)}
  
  CExpr.CFn = <(fn [<CID>] <CExpr>)>
  CExpr.CFnCall = <(<CExpr> <CExpr>)>
  CExpr.CLet = <(let [<CID>] <CExpr>)>
  CExpr.CVar = CID
  CExpr.CPrintLn = <(println <CExpr>)>
  CExpr.CString = STRING

lexical sorts STRING STRING_CHAR CID
  
lexical syntax

  LAYOUT = [\ \n\t\v\f\r]

lexical syntax
  STRING           = "\"" STRING_CHAR* "\""
  STRING_CHAR      = [\32-\126] / [\\\"]
  STRING_CHAR      = "\\n" | "\\\\" | "\\\"" | "\\t"
  
  CID = [a-zA-Z\_] [a-zA-Z0-9\_]*
  CID = "fn" {reject}
  CID = "let" {reject}
  CID = "println" {reject}

context-free restrictions

  LAYOUT? -/- [\ \n\t\v\f\r]
