module type_check/tp_var

imports
  signatures/start-sig
  type_check/beta_eq
  type_check/scopes
  type_check/type_check
  
rules
  typeOfExpr_(s, e@Var(Syn("_"))) = (Infer(q), qt) :-
  	(_, qt) == typeOfExpr(empty_scope(), q),
  	@e.Inferred := q.
  	
  typeOfExpr_(s, Var(id)) = (Var(ScopedName(ns, rid(id))), typeOfNameEntry(n)) :-
  	scopeGetName(s, id) == (n, ns).
  typeOfNameEntry : NameEntry -> Expr
  typeOfNameEntry(NameType(T)) = T.
  typeOfNameEntry(NameSubst(se, e)) = t :- typeOfExpr(se, e) == (_, t).
  
  betaReduceHead((s, e@Var(id)), as) = betaReduceHeadVar(id, scopeGetNames(s, id), as).
  betaReduceHeadVar : ID * list((path * (ID * NameEntry)))  * list((scope * Expr)) -> (scope * Expr)
  betaReduceHeadVar(_, [(_, (_, NameSubst(sw, w))) | _], as) = betaReduceHead((sw, w), as).
  betaReduceHeadVar(id, _, as) = kRebuild((empty_scope(), Var(id)), as).
  
  betaReduce_((_, Var(id))) = Var(id).
  
  expectBetaEq_((_, Var(n)), (_, Var(n))).