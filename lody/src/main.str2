module main

imports

  statixruntime
  statix/api
  injections/-
  signatures/-
  pp
  completion
  strategolib
  libstratego-gpp
  libspoofax/sdf/pp
  

rules // Analysis

  pre-analyze  = id
  post-analyze = id

  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"main", "programOk")
  editor-resolve = stx-editor-resolve
  
  editor-hover : x -> <conc-strings> (<stx-editor-hover> x, " --- ", <stx-editor-hover(|"Inferred") <+ !""> x)
  
//  get-type :: Expr -> Expr
  get-type : expr -> type // Defines a rule which matches on node and returns type'
    with <debug(!"CHECKING: ")> <strip-annos> expr
    where
      // Assigns variable a to be the result of the Statix analysis of the entire program (or throws an error)
      a := <stx-get-ast-analysis <+ fail-msg(|$[no analysis on node [<strip-annos;write-to-string> expr]])>;
      // Gets the type of the given node (or throws an error)
      type := <stx-get-ast-type(|a) <+ fail-msg(|$[no type on node [<strip-annos;write-to-string> expr]])> expr
      
//      type' := <uniquify> (type, [])
    with <debug(!"RESULT: ")> <strip-annos> type
      
  fail-msg(|msg) = err-msg(|$[get-type: [msg]]); fail
  
  // Defined for semantic code completion
  downgrade-placeholders = downgrade-placeholders-lody
  upgrade-placeholders   = upgrade-placeholders-lody
  is-inj                 = is-lody-inj-cons
  pp-partial             = pp-partial-lody-string
//  pre-analyze            = explicate-injections-lody
//  post-analyze           = implicate-injections-lody
//  
  
  
