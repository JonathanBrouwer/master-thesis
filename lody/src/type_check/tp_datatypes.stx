module type_check/tp_datatypes

imports
  signatures/start-sig
  type_check/beta_eq
  type_check/scopes
  type_check/type_check
  type_check/tp_fn
  
rules
  // A datatype is a type
  typeOfExpr_(_, e@DataType(_, _)) = (e, Type()).
  
  // If we find a declaration
  typeOfExpr_(s, DataTypeDecl(n, cs, b)) = (DataTypeDecl(n', cs', b'), b_type) :- {s' s''}
  	scopeName(s', n) == n',
  	
  	scopePutSubst(s, n', (s, DataType(n', cs'))) == s',
  	dataTypeConstrs(n', s', s', cs) == (s'', cs'),
  	typeOfExpr(s'', b) == (b', b_type).
  	
  // We want to put all the constructors in the second scope, the first scope is the context to check the constructors in (constructors cannot see eachother0
  dataTypeConstrs : ID * scope * scope * list(DataConstructor) -> (scope * list(DataConstructor))
  dataTypeConstrs(_, _, s, []) = (s, []).
  dataTypeConstrs(dn, sb, s, [Constructor(n, e) | cs]) = (s'', [Constructor(n', e') | cs']) :- {s' e_type}
  	scopeName(s', n) == n',
  	
  	typeOfExpr(sb, e) == (e', e_type),
  	checkConstructorPositive(dn, e'),
  	expectBetaEq((empty_scope(), e_type), (empty_scope(), Type())),
  	
  	scopePutType(s, n', betaReduce((sb, e'))) == s',
  	dataTypeConstrs(dn, sb, s', cs) == (s'', cs').// | error $[Constructor [n] of datatype [dn] is not strictly positive.].
  	
  //
  checkConstructorPositive : ID * Expr
  checkConstructorPositive(n, Var(n)).
  checkConstructorPositive(n, FnType(_, Var(n), b)) :- checkConstructorPositive(n, b).
  checkConstructorPositive(n, FnType(_, e, b)) :- 
  	checkConstructorPositiveSub(n, e),
  	checkConstructorPositive(n, b).
  
  checkConstructorPositiveSub : ID * Expr
  checkConstructorPositiveSub(n, Var(m)) :- n != m.
  checkConstructorPositiveSub(n, FnType(_, e1, e2)) :- 
  	checkConstructorPositiveSub(n, e1),
  	checkConstructorPositiveSub(n, e2).
  checkConstructorPositiveSub(n, Type()).
  checkConstructorPositiveSub(n, BoolType()).
  
  
  	
  // We need to generate the type of the eliminator
  // It is beta reduced since it may contain variables
  typeOfExpr_(s, DataElim(id)) = (DataElim(n), betaReduce((s, t))) :- {cs sp p}
  	scopeGetName(s, id) == (NameSubst(_, DataType(n, cs)), _),
  	new sp, p == ScopedName(sp, "P"),
  	t == FnType(p, FnType(Syn("_"), Var(n), Type()), dataTypeElimsGen(n, p, cs)).
  	
  // name of datatype, name of P function, list of data constructors left, generate the rest of the function
  dataTypeElimsGen : ID * ID * list(DataConstructor) -> Expr
  // generate the `v -> P v` part of the function
  dataTypeElimsGen(n, p, []) = FnType(Syn("v"), Var(n), FnDestruct(Var(p), Var(Syn("v")))).
  // generate the next constructor, using dataTypeElimsGenSub to find the constructor
  dataTypeElimsGen(n, p, [Constructor(c, e) | cs]) = FnType(Syn("_"), dataTypeElimsGenSub(n, p, e, Var(c)), dataTypeElimsGen(n, p, cs)).
  
  // name of datatype, name of P function, constructor expression, the expression that is being built (starting with the constructor name, applying arguments)
  dataTypeElimsGenSub : ID * ID * Expr * Expr -> Expr
  // Sub is the return type. We want to generate `P (C ...)`
  dataTypeElimsGenSub(n, p, Var(n), base) = FnDestruct(Var(p), base).
  // Sub is a FnType with a == n. We generate:
  // m: a (= n) -> _: p m -> rest
  dataTypeElimsGenSub(n, p, FnType(m, Var(n), b), base) = 
  	FnType(m, Var(n), 
  		FnType(Syn("_"), FnDestruct(Var(p), Var(m)),
  			dataTypeElimsGenSub(n, p, b, FnDestruct(base, Var(m)))
  		)
  	).
  // Sub is a FnType a != n. We generate:
  // m: a -> rest
  // We add `(base m)` to the rest
  dataTypeElimsGenSub(n, p, FnType(m, a, b), base) = FnType(m, a, dataTypeElimsGenSub(n, p, b, FnDestruct(base, Var(m)))).
  
  
  betaReduceHeadK((s, e@DataType(n, cs)), []) = (s, DataType(n, cs)).
//  betaReduceHeadK((s, e@DataElim(n))) = (s, DataElim(n)).
  
  //First, parse the arguments (at least one argument is guaranteed)
  // betaReduceHeadFnConstructorArgs will parse the arguments
  betaReduceHeadK((s, DataElim(n)), as@[p | args]) = betaReduceHeadFnElim1(s, n, p, as, betaReduceHeadFnConstructorArgs(args, cs), cs) :-
  	scopeGetName(s, n) == (NameSubst(_, DataType(n, cs)), _).
  
  // Checks if we have enough arguments
  // s, n, original args, return value of betaReduceHeadFnConstructorArgs, data constructors -> result
  betaReduceHeadFnElim1 : scope * ID * (scope * Expr) * list((scope * Expr)) * (list((scope * Expr)) * list((scope * Expr)) * int) * list(DataConstructor) -> (scope * Expr)
  betaReduceHeadFnElim1(s, n, _,  as_original, (_, _, 0), _) = kRebuild((s, DataElim(n)), as_original). // Not enough
  betaReduceHeadFnElim1(s, n, _, as_original, ([], _, 1), _) = kRebuild((s, DataElim(n)), as_original). // Enough for args, not enough for v.
  // There are enough, we remove one more called v. Then we call betaReduceHeadFnElim2 with that information. 
  betaReduceHeadFnElim1(_, n, p, _, ([v | as_after], as_cs, 1), cs) = betaReduceHeadK(betaReduceHeadFnElim3(n, betaReduceHeadFnElim2(betaReduceHeadK(v, []), cs, as_cs), [p | as_cs]), as_after). 
  
  // Removes an argument for each constructor. Returns 1 if successful.
  // list of arguments in * constructors -> (arguments out * results * success boolean)
  betaReduceHeadFnConstructorArgs : list((scope * Expr)) * list(DataConstructor) -> (list((scope * Expr)) * list((scope * Expr)) * int)
  betaReduceHeadFnConstructorArgs([a|as], [_|cs]) = (a_after, [a | a_res], suc) :- betaReduceHeadFnConstructorArgs(as, cs) == (a_after, a_res, suc).
  betaReduceHeadFnConstructorArgs(as, []) = (as, [], 1).
  betaReduceHeadFnConstructorArgs([], [_|_]) = (_, _, 0). // Not enough args
  
  // Finds the correct constructor to apply, and apply it
  // v, constructors left for current iteration, functions left for current iteration
  betaReduceHeadFnElim2 : (scope * Expr) * list(DataConstructor) * list((scope * Expr)) -> ((scope * Expr) * Expr * int)
  // We found the correct constructor, replace the var with the f function
  //TODO move this betaReduceHead to the proper place
  betaReduceHeadFnElim2((s, Var(v)), [Constructor(v, ce) | _], [f | _]) = (betaReduceHeadK(f, []), ce, 1).
  // No more constructors left, we did not find it
  betaReduceHeadFnElim2((s, Var(v)), [], []) = (_, _, 0).
  // Did not find the correct one yet, keep searching
  betaReduceHeadFnElim2((s, Var(v)), [Constructor(v', _) | vs], [_ | fs]) = betaReduceHeadFnElim2((s, Var(v)), vs, fs) :- v != v'.
  // FnDestruct 
  betaReduceHeadFnElim2((s, FnDestruct(f, a)), vs, fs) = (kApply(e, (s, a)), c, succ) :-
  	betaReduceHeadFnElim2(betaReduceHeadK((s, f), []), vs, fs) == (e, c, succ).
  
  // Inserts recursive calls where necessary, and beta reduces result
  // Name of datatype, result of betaReduceHeadFnElim2, values for recursive calls
  betaReduceHeadFnElim3 : ID * ((scope * Expr) * Expr * int) * list((scope * Expr)) -> (scope * Expr)
//  betaReduceHeadFnElim3(_, (e, _, 1)) = e.
//  betaReduceHeadFnElim3(_, (_, _, 0)) = _. //TODO return original value
  // We are at the base case
  // e is now the root function, note that it is not necesarrily var anymore
  betaReduceHeadFnElim3(_, (e, Var(_), 1), _) = e.
  // Recursive case for self-recursive types
  betaReduceHeadFnElim3(n, ((s, FnDestruct(fe, ae)), FnType(_, Var(n), fc), 1), r) = kApply(kApply(base, (s, ae)), recarg) :-
  	base == betaReduceHeadFnElim3(n, (betaReduceHeadK((s, fe), []), fc, 1), r),
  	recarg == kApply(betaReduceHeadK((s, DataElim(n)), r), (s, ae)).
  // Normal recursive case
  betaReduceHeadFnElim3(n, ((s, FnDestruct(fe, ae)), FnType(_, _, fc), 1), r) = kApply(base, (s, ae)) :-
  	base == betaReduceHeadFnElim3(n, (betaReduceHeadK((s, fe), []), fc, 1), r).
  	
  //betaReduceHeadFnApply(betaReduceHeadFnElim3(n, (betaReduceHead((s, fe)), fc, 1)), (s, ae)).

//type_check/tp_datatypes!betaReduceHeadFnElim3(ScopedName(#s'_450-58,"MaybeBool"), ((#s'_1169-148,FnConstruct(…,…,…)),BoolType(),1), (?s-1183,?f-1182))
  
  
  //TODO
//  betaReduceHead((s, DataElim(n))) = (_, _).
  
  betaReduce_((s, e@DataType(_, _))) = e.
  expectBetaEq_((_, DataType(n, _)), (_, DataType(n, _))).
  
  
  
  