module type_check/type_check

imports
  signatures/start-sig
  type_check/beta_eq
  type_check/scopes
  type_check/tp_bools
  type_check/tp_datatypes
  type_check/tp_fn
  type_check/tp_infer
  type_check/tp_let
  type_check/tp_postulate
  type_check/tp_type
  type_check/tp_typeassert
  type_check/tp_var
  
signature constructors
  Infer : Expr -> Expr
  ScopedName : scope * RID -> ID
  
  DataType : ID * list(DataConstructor) -> Expr

rules

  typeOfExpr : scope * Expr -> (Expr * Expr)
  typeOfExpr(s, e) = (q, T) :-
    typeOfExpr_(s, e) == (q, T),
    @e.type := betaReduce((sEmpty(), T)).
//	@e.type := T.
  
  typeOfExpr_ : scope * Expr -> (Expr * Expr)

  scopeName : scope * ID -> ID
  scopeName(s', Syn(n)) = ScopedName(s', n).
  scopeName(_, x@ScopedName(_, _)) = x.


