module type_check/tp_datatypes_reduce

imports
  signatures/start-sig
  type_check/beta_eq
  type_check/scopes
  type_check/type_check
  type_check/tp_fn
  type_check/tp_datatypes
  
rules

  // -- Beta reduction rules  
  betaReduceHead((s, e@DataElim(n)), as) = betaReduceHeadChoose((s, e), as, i, j) :- {ps cs v}
  	sGetDataTypeDecl(s, n) == DataType(n, ps, _, cs),
  	bhrDataSplitArgs(as, ps, cs, 0) == (i, _, _, v, _),
  	bhrCheckV(cs, v) == j.
  	
  bhrCheckV : list(DataConstructor) * (scope * Expr) -> int
  bhrCheckV([], (s, Var(n))) = 0.
  bhrCheckV([Constructor(n, _) | _], (s, Var(n))) = 1.
  bhrCheckV([Constructor(_, _) | cs], (s, Var(n))) = bhrCheckV(cs, (s, Var(n))).
  bhrCheckV(cs, (s, FnDestruct(f, _))) = bhrCheckV(cs, betaReduceHead((s, f), [])).
  	
  betaReduceHeadChoose : (scope * Expr) * list((scope * Expr)) * int * int -> (scope * Expr)
  betaReduceHeadChoose(e, as, _, _) = kRebuild(e, as).
  betaReduceHeadChoose((s, DataElim(n)), as, 1, 1) = betaReduceHead(brhDo(s, n, cs, a, (vn, v), [p | a], createCoreElim(Var(n), ps, [])), r) :- 
  	sGetDataTypeDecl(s, n) == DataType(n, ps, _, cs),
  	
  	bhrDataSplitArgs(as, ps, cs, 0) == (1, p, a, v, r),
  	brhDataCoreV(v) == vn.  
  
  // FINDS MATCHING CONSTRUCTOR
  // Given a
  // - Data type name
  // - Constructors of datatype
  // - Args applied to elimination
  // - Value that is elimininated, split up in original value and constructor name
  // - List of arguments to the original function, for recursive applications
  // Returns beta reduced value
  brhDo : scope * ID * list(DataConstructor) * list((scope * Expr)) * (ID * (scope * Expr)) * list((scope * Expr)) * Expr -> (scope * Expr)
  
  // Constructor matches, use brhDo2 on the result
  brhDo(s, n, [Constructor(c, ce) | cs], [a | as], (c, ve), ar, core) = brhDo2(s, n, ce, a, betaReduceHead(ve, []), ar, core).
  // Constructor does not match, skip
  brhDo(s, n, [Constructor(_, ce) | cs], [_ | as], (c, ve), ar, core) = brhDo(s, n, cs, as, (c, ve), ar, core).
  
  // APPLIES ARGUMENTS TO FUNCTION
  // Given a
  // - Data type name
  // - Constructor definition expression
  // - Function .. -> .. -> p (constructor) that was given to the eliminator for constructor
  // - Value that is elimininated
  // - List of arguments to the original function, for recursive applications
  // Returns beta reduced value
  // Ex 1: Bool Bool f _ 			=> f
  // Ex 2: Bool (.. -> c) f (vf va) => Bool c (f va) vf
  // Ex 3: Maybe (Maybe T) f _ 		=> f
  brhDo2 : scope * ID * Expr * (scope * Expr) * (scope * Expr) * list((scope * Expr)) * Expr -> (scope * Expr)
  brhDo2(s, n, core, f, _, _, core) = f.
  brhDo2(s, n, FnType(_, Var(n), c), f, (vs, FnDestruct(vf, va)), ar, core) = brhDo2(s, n, c, kApply(kApply(f, (vs, va)), r), betaReduceHead((vs, vf), []), ar, core) :-
  	r == betaReduceHead((s, DataElim(n)), append(ar, (vs, va))).
  brhDo2(s, n, FnType(_, _, c), f, (vs, FnDestruct(vf, va)), ar, core) = brhDo2(s, n, c, kApply(f, (vs, va)), betaReduceHead((vs, vf), []), ar, core).
  
 
  
  // Arguments look like PS P AS V R
  // Function returns P AS V R
  bhrDataSplitArgs : list((scope * Expr)) * list(DataParam) * list(DataConstructor) * int -> (int * (scope * Expr) * list((scope * Expr)) * (scope * Expr) * list((scope * Expr)))
  bhrDataSplitArgs([_|as], [_|ps], cs, 0) = bhrDataSplitArgs(as, ps, cs, 0). // skip ps arg
  bhrDataSplitArgs([p|as], [], cs, 0) = (r0, p, r1, r2, r3) :-                   // grab p arg
  	bhrDataSplitArgs(as, [], cs, 1) == (r0, _, r1, r2, r3).     
  bhrDataSplitArgs([a|as], [], [_|cs], 1) = (r0, _, [a|r1], r2, r3) :-           // grab a arg
  	bhrDataSplitArgs(as, [], cs, 1) == (r0, _, r1, r2, r3).
  bhrDataSplitArgs([v|rs], [], [], 1) = (1, _, [], betaReduceHead(v, []), rs).  // grab v arg
  bhrDataSplitArgs([], _, _, _) = (0, _, _, _, _). // no args left
  
  // Get the `v` argument from the `v` argument applied to things
  brhDataCoreV : (scope * Expr) -> ID
  brhDataCoreV((s, FnDestruct(f, a))) = brhDataCoreV(betaReduceHead((s, f), [])).
  brhDataCoreV((s, Var(n))) = n.
  
  append : list((scope * Expr)) * (scope * Expr) -> list((scope * Expr))
  append([], x) = [x].
  append([e | es], x) = [e | append(es, x)].
  
  betaReduce_((s, e@DataElim(_))) = e.
  
  
  
  