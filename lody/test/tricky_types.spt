module tricky_types

test tricky 1 [[
[[(\T : Type. \T : T. T)]]
]] 0 errors run get-type on #1 to FnType("T", Type(0), FnType("T'", Var("T"), Var("T")))

test tricky 1b [[
[[(\T : Type 1. \T : T. T) Type]]
]] 0 errors run get-type on #1 to FnType("T", Type(0), Type(0))

test tricky 2 [[
[[(\T: Type. \T : Type. \T: T. T)]]
]] 0 errors run get-type on #1 to FnType("T", Type(0), FnType("T'", Type(0), FnType("T''", Var("T'"), Var("T'"))))

test tricky 3 [[
let f = \x: Type. \T: Type. \y: x. y;
[[(\T : Type. f T)]]
]] 0 errors run get-type on #1 to FnType("T", Type(0), FnType("T'", Type(0), FnType("y", Var("T"), Var("T"))))

test tricky 4 [[
[[
(\x : Type. (let y = x; (\ x : y. y)))
]]
]] 0 errors run get-type on #1 to FnType("x", Type(0), FnType("x'", Var("x"), Type(0)))

test tricky 5 simple [[
[[
(\T : Type. \G : T. G) :: (H: Type -> I: H -> H)
]]
]] 0 errors run get-type on #1 to FnType("T", Type(0), FnType("G", Var("T"), Var("T")))

test tricky 5 complex [[
[[
(\T : Type. \T : T. T) :: (H: Type -> I: H -> H)
]]
]] 0 errors run get-type on #1 to FnType("T", Type(0), FnType("T'", Var("T"), Var("T")))

test postulate 1 [[
postulate x : (_: Type -> Bool);
[[x]]
]] 0 errors run get-type on #1 to FnType("_", Type(0), BoolType())

test postulate 2 [[
postulate x : (_: Type -> Bool);
[[x Bool]]
]] 0 errors run get-type on #1 to BoolType()




