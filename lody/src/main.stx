module main

imports

  signatures/start-sig
  beta_eq
  scopes
  do_lazy_substs
  
signature
constructors
  
  WithSubst : Expr * ID * (scope * Expr) -> Expr
//  WithScope : scope * Expr -> Expr
  
rules

  programOk : Start
  programOk(Program(expr)) :- typeOfExpr(empty_scope(), expr) == _.
 
  // scope * expr -> type of expr
  typeOfExpr : scope * Expr -> Expr
  typeOfExpr(s, e) = T :-
    typeOfExpr_(s, e) == T,
    @e.type := betaReduce((s, T)).
//    @e.type := (s, T).
  
  typeOfExpr_ : scope * Expr -> Expr
  typeOfExpr_(_, Type()) = Type().
  
  typeOfExpr_(s, Var(id)) = typeOfNameEntry(scopeGetName(s, id)).
  typeOfNameEntry : NameEntry -> Expr
  typeOfNameEntry(NameType(sT, T)) = doLazySubsts(sT, T).
  typeOfNameEntry(NameSubst(se, e)) = typeOfExpr(se, e).
  
  typeOfExpr(_, AlphaEqVars(_, _)) = _.
	
  typeOfExpr_(s, FnType(arg_name, arg_type, rtrn)) = Type() :-
	// The arg type must be a type
  	expectBetaEq((empty_scope(), typeOfExpr(s, arg_type)), (empty_scope(), Type())),
  	// Now typecheck the type of the body with the arg in scope
  	expectBetaEq((empty_scope(), typeOfExpr(scopePutType(s, arg_name, (s, arg_type)), rtrn)), (empty_scope(), Type())).
  	
  typeOfExpr_(s, FnConstruct(arg_name, arg_type, body)) = FnType(arg_name, doLazySubsts(s, arg_type), body_type) :-
	// The arg type must be a type
  	expectBetaEq((empty_scope(), typeOfExpr(s, arg_type)), (empty_scope(), Type())),
  	// Now typecheck the body with the arg in scope
  	typeOfExpr(scopePutType(s, arg_name, (s, arg_type)), body) == body_type.
  
  typeOfExpr_(s, FnDestruct(fn, arg)) = WithSubst(doLazySubsts(sf, fn_body_type), fn_arg_name, (s, arg)) :- {fn_arg_type}
  	// After beta reduction, the type of fn must be FnType
  	betaReduceHead((empty_scope(), typeOfExpr(s, fn))) == (sf, FnType(fn_arg_name, fn_arg_type, fn_body_type)),
  	// And the type of arg must be beta eq to the declared arg type
  	expectBetaEq((empty_scope(), typeOfExpr(s, arg)), (sf, fn_arg_type)).
  	
  typeOfExpr_(s, Let(n, v, b)) = typeOfExpr(scopePutSubst(s, n, (s, v)), b) :-
  	typeOfExpr(s, v) == _.
  	
  
