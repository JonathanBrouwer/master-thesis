module church_product

test prod type [[
[[
let prod = \P : Type. \Q : Type. 
	C : Type -> _0: (_1: P -> _2 : Q -> C) -> C;
prod
]]
]] 0 errors run get-type on #1 to FnType(_, Type(0), FnType(_, Type(0), Type(1)))

test pair fn [[
[[
let prod = \P : Type. \Q : Type. 
	C : Type -> _0: (_1: P -> _2 : Q -> C) -> C;
let pair = \P : Type. \Q : Type. \p : P. \q : Q. 
	\C : Type. \f : _0: P -> _1: Q -> C. f p q;
pair
]]
]] 0 errors

test make pair [[
[[
let prod = \P : Type. \Q : Type. 
	C : Type -> _0: (_1: P -> _2 : Q -> C) -> C;
let pair = \P : Type. \Q : Type. \p : P. \q : Q. 
	\C : Type. \f : _0: P -> _1: Q -> C. f p q;
pair Bool Bool false true
]]
]] 0 errors run get-type on #1 to FnType( "C" , Type(0) , FnType( "f" , FnType("_0", BoolType(), FnType("_1", BoolType(), Var("C"))) , Var("C") ) )

test fst 1 [[
[[
let prod = \P : Type. \Q : Type. 
	C : Type -> _0: (_1: P -> _2 : Q -> C) -> C;
let pair = \P : Type. \Q : Type. \p : P. \q : Q. 
	\C : Type. \f : _0: P -> _1: Q -> C. f p q;
let fst = \P : Type. \Q : Type. 
	\x: prod P Q. x P (\p: P. \q: Q. p);
fst Bool Bool (pair Bool Bool false true)
]]
]] 0 errors run get-type on #1 to BoolType()




