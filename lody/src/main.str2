module main

imports

  statixruntime
  statix/api
  injections/-
  signatures/-
  pp
  completion
  strategolib
  libstratego-gpp
  libspoofax/sdf/pp
  
signature constructors
  Infer : Expr -> Expr
  ScopedName : ? * RID -> ID
  Type : int -> Expr
  DataElim : ID * int -> Expr

rules // Analysis
  
  pre-analyze  = desugar
  post-analyze = id

  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"main", "programOk")
  editor-resolve = stx-editor-resolve
  
  editor-hover : x -> <conc-strings> (<stx-editor-hover> x, " --- ", <stx-editor-hover(|"Inferred") <+ !""> x)
  
//  get-type :: Expr -> Expr
  get-type : expr -> type' // Defines a rule which matches on node and returns type'
    with <debug(!"CHECKING: ")> expr
    where
      // Assigns variable a to be the result of the Statix analysis of the entire program (or throws an error)
      a := <stx-get-ast-analysis <+ fail-msg(|$[no analysis on node [<strip-annos;write-to-string> expr]])>;
      // Gets the type of the given node (or throws an error)
      type := <stx-get-ast-type(|a) <+ fail-msg(|$[no type on node [<strip-annos;write-to-string> expr]])> expr;
      
      type' := <uniquify> <strip-annos> type
//      type' := <strip-annos> type
      
  fail-msg(|msg) = err-msg(|$[get-type: [msg]]); fail
  
  // Defined for semantic code completion
  downgrade-placeholders = downgrade-placeholders-lody
  upgrade-placeholders   = upgrade-placeholders-lody
  is-inj                 = is-lody-inj-cons
  pp-partial             = pp-partial-lody-string  


  desugar :: ? -> ?
  desugar = topdown(preserve-annos(try(desugar-sub)))
  
  desugar-sub :: ? -> ?
  desugar-sub : TypeLit() -> Type(0)
  desugar-sub : TypeLitInt(u) -> Type(<string-to-int> u)
  desugar-sub : DataElimLit(n) -> DataElim(n, 0)
  desugar-sub : DataElimLitInt(n, u) -> DataElim(n, <string-to-int> u)
  desugar-sub : AnonFnType(a, b) -> FnType(Syn("_"), a, b)
  
  
  uniquify-sub :: ? -> ?
  uniquify-sub : s -> s'
  where <is(ID)> s
  where not(<Rename> s)
  with <gen-name> s => s'
  with <debug(!"RENAME: ")> (s, s')
  with rules( Rename : s -> s' )
  
  uniquify-sub : s -> s''
  where <is(ID)> s
  where <Rename> s => s''
  
  uniquify-sub : Infer(e) -> e
  
  uniquify :: ? -> ?
  uniquify = topdown(try(uniquify-sub))
  
  gen-name :: ID -> string
  gen-name : Syn(s) -> <gen-name-s> s
  gen-name : ScopedName(_, s) -> <gen-name-s> s
  
  gen-name-s :: string -> string
  gen-name-s : "_" -> "_"
  gen-name-s : s -> s
  where not(<RenameTaken> s)
  with rules( RenameTaken : s -> s )
  gen-name-s : s -> <gen-name-s> s'
  where <RenameTaken> s
  with <conc-strings> (s, "'") => s'
  
  
  compile-program : Program(e) -> <pp-clojure-string> CProgram([CPrintLn(<compile-expr> e)])
  
  compile-id :: ID -> string
  compile-id : Syn(s) -> s
  compile-id : ScopedName(_, s) -> s
  
  compile-expr :: Expr -> CExpr
  compile-expr : Let(x, v, b) -> CLet(<compile-id> x, <compile-expr> v, <compile-expr> b)
  compile-expr : FnConstruct(x, _, b) -> CFn(<compile-id> x, <compile-expr> b)
  compile-expr : FnDestruct(f, a) -> CFnCall(<compile-expr> f, <compile-expr> a)
  compile-expr : Var(x) -> CVar(<compile-id> x)
  
  compile-expr : Postulate(_, _, b) -> <compile-expr> b
  compile-expr : TypeAssert(b, _) -> <compile-expr> b
  compile-expr : BoolTrue() -> CTrue()
  compile-expr : BoolFalse() -> CFalse()
  compile-expr : BoolIf(c, e1, e2) -> CIf(<compile-expr> c, <compile-expr> e1, <compile-expr> e2)
  
  compile-expr : DataTypeDecl(_, _, _, _, cs, b) -> <compile-datatype-decl> (cs, <compile-expr> b)
  
  compile-datatype-decl :: List(DataConstructor) * CExpr -> CExpr
  compile-datatype-decl : ([], e) -> e
  compile-datatype-decl : ([Constructor(x, _) | cs], e) -> CLet(<compile-id> x, CTrue(), e)
  
  
  
  
  
  
  
  
  
  
  
  
