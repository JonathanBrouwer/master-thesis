module typecheck_datatypes

test type of nat [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
[[Nat]]
]] 0 errors run get-type on #1 to Type()

test nats [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
[[S (S Z)]]
]] 0 errors run get-type on #1 to DataType("Nat", _)

test nats check [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
Z : Nat
]] 0 errors

test with postulate [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
postulate x : Nat;
[[x]]
]] 0 errors run get-type on #1 to DataType("Nat", _)

test with postulate [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
postulate x : Nat;
x
]] 0 errors

test elim box [[
data Unit =
	MakeUnit : Unit;
[[elim Unit]]
]] 0 errors run get-type on #1 to FnType(
  "P"
, FnType("_", DataType("Unit", _), Type())
, FnType(
    "v"
  , DataType("Unit", _)
  , FnDestruct(Var("P"), Var("v"))
  )
)

test elim box 2 [[
data Unit =
	MakeUnit : Unit;
(elim Unit : (P: (_ : Unit -> Type) -> (n: Unit -> P n)))
]] 0 errors

test elim bool [[
data MyBool =
	MyFalse : MyBool,
	MyTrue : MyBool;
[[elim MyBool]]
]] 0 errors

test elim nat [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
[[elim Nat]]
]] 0 errors 









