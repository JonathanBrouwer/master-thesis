resolve {s x y e' t' e_type t_type s' s'' n' cs' b' b_type z w}
  new s,
  
//  typeOfExpr(s, DataTypeDecl(Syn("Unit"), [Constructor(Syn("MakeUnit"), Var(Syn("Unit")))], DataElim(Syn("Unit")))) == (x, y)
	typeOfExpr(s, DataTypeDecl(Syn("Unit"), [Constructor(Syn("MakeUnit"), Var(Syn("Unit")))], DataElim(Syn("Unit")))) == (x, y)
	
//	typeOfExpr(s'', DataElim(Syn("Nat"))) == (b', b_type)


imports
  signatures/start-sig
  type_check/beta_eq
  type_check/scopes
  type_check/type_check
  
  