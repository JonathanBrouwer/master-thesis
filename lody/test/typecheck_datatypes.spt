module typecheck_datatypes

test type of nat [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
[[Nat]]
]] 0 errors run get-type on #1 to Type()

test nats [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
[[S (S Z)]]
]] 0 errors run get-type on #1 to DataType("Nat", _)

test nats check [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
Z : Nat
]] 0 errors

test with postulate [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
postulate x : Nat;
[[x]]
]] 0 errors run get-type on #1 to DataType("Nat", _)

test with postulate [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
postulate x : Nat;
x
]] 0 errors


test elim box [[
data Unit =
	MakeUnit : Unit;
elim Unit : P: (_ : Unit -> Type) -> _: (P MakeUnit) -> n: Unit -> P n
]] 0 errors

test elim bool [[
data MyBool =
	MyFalse : MyBool,
	MyTrue : MyBool;
elim MyBool : P: (_ : MyBool -> Type) -> _: (P MyFalse) -> _: (P MyTrue) -> n: MyBool -> P n
]] 0 errors

test elim nat [[
data Nat =
	Z : Nat,
	S : x: Nat -> Nat;
elim Nat : P: (_: Nat -> Type) -> _: (P Z) -> _: (x: Nat -> _: P x -> P (S x)) -> n: Nat -> P n
]] 0 errors 


test elim bool usage [[
data MyBool =
	MyFalse : MyBool,
	MyTrue : MyBool;
((elim MyBool) (\_: MyBool. Bool) false true) : (_: MyBool -> Bool)
]] 0 errors








