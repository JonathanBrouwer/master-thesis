module type_check/tp_fn

imports
  signatures/start-sig
  type_check/beta_eq
  type_check/scopes
  type_check/type_check
  
rules
  typeOfExpr_(s, FnType(arg_name, arg_type, rtrn)) = (FnType(arg_name', arg_type', rtrn'), Type()) :- {arg_type_reduced arg_type_type rtrn_type s'}
  	scopeName(s', arg_name) == arg_name',
  	
	// The arg type must be a type
	typeOfExpr(s, arg_type) == (arg_type', arg_type_type),
  	expectBetaEq((sEmpty(), arg_type_type), (sEmpty(), Type())),
  	// Reduce arg_type
  	betaReduce((s, arg_type')) == arg_type_reduced,
  	// Now typecheck the type of the body with the arg in scope
  	sPutType(s, arg_name', arg_type_reduced) == s',
  	typeOfExpr(s', rtrn) == (rtrn', rtrn_type),
  	expectBetaEq((sEmpty(), rtrn_type), (sEmpty(), Type())).
  
  typeOfExpr_(s, FnConstruct(arg_name, arg_type, body)) = (FnConstruct(arg_name', arg_type', body'), FnType(arg_name', arg_type_reduced, body_type)) :- {arg_type_type ns s'}
	scopeName(s', arg_name) == arg_name',
	
	// The arg type must be a type
	typeOfExpr(s, arg_type) == (arg_type', arg_type_type),
  	expectBetaEq((sEmpty(), arg_type_type), (sEmpty(), Type())),
  	// Reduce arg_type
  	betaReduce((s, arg_type')) == arg_type_reduced,
  	// Now typecheck the body with the arg in scope
  	sPutType(s, arg_name', arg_type_reduced) == s',
  	typeOfExpr(s', body) == (body', body_type).
  	
  typeOfExpr_(s, FnDestruct(fn, arg)) = (FnDestruct(fn', arg'), fn_body_type') :- {sf fn_arg_name arg_type fn_type fn_arg_type fn_body_type s'}
  	// After beta reduction, the type of fn must be FnType
  	typeOfExpr(s, fn) == (fn', fn_type),
  	betaReduceHeadFull((sEmpty(), fn_type)) == (sf, FnType(fn_arg_name, fn_arg_type, fn_body_type)),
  	// And the type of arg must be beta eq to the declared arg type
  	typeOfExpr(s, arg) == (arg', arg_type),
  	expectBetaEq((sEmpty(), arg_type), (sf, fn_arg_type)),
  	// Find body type with substitution needed
  	sPutSubst(sf, fn_arg_name, (s, arg')) == s',
  	betaReduce((s', fn_body_type)) == fn_body_type'.
  	
  	
  	
  betaReduceHead((s, e@FnType(_, _, _)), []) = (s, e).
  
  // If we encounter another FnDestruct, add it to the argument stack (krivine style)
  betaReduceHead((s, FnDestruct(fn, arg)), args) = betaReduceHead(betaReduceHead((s, fn), []), [(s, arg) | args]).
  // If we encounter a FnConstruct, apply it to its argument
  betaReduceHead((s, FnConstruct(arg_name, arg_type, body)), [arg | args]) = betaReduceHead(betaReduceHead((sPutSubst(s, arg_name, arg), body), []), args).
  // If we encounter a FnConstruct with no arguments, return it
  betaReduceHead((s, e@FnConstruct(_, _, _)), []) = (s, e).
  
  betaReduce_((s, FnType(arg_name, arg_type, rtrn))) = FnType(arg_name, betaReduce((s, arg_type)), betaReduce((s, rtrn))).
  betaReduce_((s, FnConstruct(arg_name, arg_type, body))) = FnConstruct(arg_name, betaReduce((s, arg_type)), betaReduce((s, body))).
  betaReduce_((s, FnDestruct(fn, arg))) = FnDestruct(betaReduce((s, fn)), betaReduce((s, arg))).
  	
  expectBetaEq_((s1, FnType(arg_name1, arg_type1, body1)), (s2, FnType(arg_name2, arg_type2, body2))) :-
  	expectBetaEq((s1, arg_type1), (s2, arg_type2)),
  	expectBetaEq(
  		(sPutSubst(s1, arg_name1, (sEmpty(), AlphaEqVars(arg_name1, arg_name2))), body1), 
  		(sPutSubst(s2, arg_name2, (sEmpty(), AlphaEqVars(arg_name1, arg_name2))), body2)).
  expectBetaEq_((s1, FnConstruct(arg_name1, arg_type1, body1)), (s2, FnConstruct(arg_name2, arg_type2, body2))) :-
  	expectBetaEq((s1, arg_type1), (s2, arg_type2)),
  	expectBetaEq(
  		(sPutSubst(s1, arg_name1, (sEmpty(), AlphaEqVars(arg_name1, arg_name2))), body1), 
  		(sPutSubst(s2, arg_name2, (sEmpty(), AlphaEqVars(arg_name1, arg_name2))), body2)).
  expectBetaEq_((s1, FnDestruct(fn1, arg1)), (s2, FnDestruct(fn2, arg2))) :-
  	expectBetaEq((s1, fn1), (s2, fn2)), expectBetaEq((s1, arg1), (s2, arg2)).
  	
  	