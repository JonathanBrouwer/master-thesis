module type_check/tp_let

imports
  signatures/start-sig
  type_check/beta_eq
  type_check/scopes
  type_check/type_check

rules
  typeOfExpr_(s, l@Let(n, v, b)) = (Let(n', v', b'), b_type) :- {s'}
  	scopeName(s', n) == n',
    //Convert arg_name
  	typeOfExpr(s, v) == (v', _),
  	sPutSubst(s, n', (s, v')) == s',
  	typeOfExpr(s', b) == (b', b_type),
  	@l.Inferred := betaReduce((s, v')).
  	
  betaReduceHead((s, Let(n, v, b)), args) = betaReduceHead((sPutSubst(s, n, (s, v)), b), args).