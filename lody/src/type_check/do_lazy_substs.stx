module type_check/do_lazy_substs

imports
  signatures/start-sig
  type_check/scopes
  type_check/type_check

rules
  // Given a scope with NameSubst items
  // Applies the substitutions to the given expressions
  doLazySubsts : scope * Expr -> Expr
  doLazySubsts(_, Type()) = Type().
  
  doLazySubsts(s, Var(n)) = doLazySubstsName(n, scopeGetNames(s, rid(n))).
  doLazySubstsName : ID * list((path * (RID * NameEntry))) -> Expr
  doLazySubstsName(n, [(_, (_, NameSubst(sw, w))) | _]) = doLazySubsts(sw, w).
  doLazySubstsName(n, _) = Var(n).
  
//  doLazySubsts(s, Var(n)) = doLazySubstsName(n, scopeGetNameOpt(s, rid(n))).
//  doLazySubstsName : ID * list((NameEntry * scope)) -> Expr
//  doLazySubstsName(n, [(NameSubst(sw, w), _) | _]) = doLazySubsts(sw, w).
//  doLazySubstsName(n, _) = Var(n).
  
  doLazySubsts(s, FnType(arg_name, arg_type, rtrn)) = 
  	FnType(arg_name, doLazySubsts(s, arg_type), doLazySubsts(scopePutType(s, rid(arg_name), Type()), rtrn)).
  doLazySubsts(s, FnConstruct(arg_name, arg_type, body)) = 
  	FnConstruct(arg_name, doLazySubsts(s, arg_type), doLazySubsts(scopePutType(s, rid(arg_name), Type()), body)).
  doLazySubsts(s, FnDestruct(fn, arg)) = FnDestruct(doLazySubsts(s, fn), doLazySubsts(s, arg)).
  doLazySubsts(s, Let(n, v, b)) = doLazySubsts(scopePutSubst(s, rid(n), (s, v)), b).
  
  doLazySubsts(s, BoolTrue()) = BoolTrue().
  doLazySubsts(s, BoolFalse()) = BoolFalse().
  doLazySubsts(s, BoolType()) = BoolType().
  doLazySubsts(s, BoolIf(c, t, e)) = BoolIf(doLazySubsts(s, c), doLazySubsts(s, t), doLazySubsts(s, e)).
  
  doLazySubsts(s, Infer(e)) = Infer(e).
  
  doLazySubsts(s, TypeAssert(e1, e2)) = TypeAssert(doLazySubsts(s, e1), doLazySubsts(s, e2)).
  
      
  // Semantic code completion
  doLazySubsts(_, Expr-Plhdr()) = _.
  	